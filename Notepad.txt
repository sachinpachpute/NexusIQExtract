=RIGHT(GET.WORKBOOK(1),LEN(GET.WORKBOOK(1))-FIND("]",GET.WORKBOOK(1),1))


=INDEX(GET.WORKBOOK(1),COLUMN(INDIRECT("2:16")),1)

=INDEX(INDIRECT("'" & C8 & "'!H:H"), MATCH(C9, INDIRECT("'" & C8 & "'!B:B"), 0))

=INDEX(ComponentData, MATCH(0, COUNTIF($C$8:C8, ComponentData), 0))

=COUNTIF(INDIRECT("'" & C8 & "'!E:E"), "Architecture-Quality")

=INDIRECT("'" & E29 & "'!B:B")
=INDIRECT("'" & E29 & "'!B2:B")
=IF(E29="", "", E29 & "," & TEXTJOIN(",", TRUE, INDIRECT("'" & E29 & "'!B2:B")))

=IF(F12<>"", SUM(INDIRECT("'"&F12&"'!M:M")), "")

=IF(F12="All Applications", SUMPRODUCT(SUMIF(INDIRECT("'"&Sheet1:Sheet3&"'!M:M"), "<>")), IF(F12<>"", SUM(INDIRECT("'"&F12&"'!M:M")), ""))
=IF(F12="All Applications", SUM(INDIRECT("'"&F$2:F$51&"'!M:M")), IF(F12<>"", SUM(INDIRECT("'"&F12&"'!M:M")), ""))


=IF(E29<>"All Applications", INDIRECT("'" & E29 & "'!B:B"), "")

=E29="All Applications"



=IF(F12<>"All Applications", INDIRECT("'" & F12 & "'!B:B"), "")

=COUNTIF(INDIRECT("'" & F12 & "'!E:E"), "Security-Critical")
=IF(F12<>"All Applications", COUNTIF(INDIRECT("'" & F12 & "'!E:E"), "Security-Critical"), "")

=IF(F12<>"All Applications", INDEX(INDIRECT("'" & F12 & "'!B:B"), MATCH(F30, INDIRECT("'" & F12 & "'!E:E"), 0)), "")
=IF(F12<>"All Applications", FILTER(INDIRECT("'" & F12 & "'!B:B"), INDIRECT("'" & F12 & "'!E:E")=F30), "")
=IF(F12<>"All Applications", INDEX(INDIRECT("'" & F12 & "'!B:B"), MATCH(F30, INDIRECT("'" & F12 & "'!E:E"), 0)), "")

=IF(F12<>"All Applications",
    COUNTIF(INDIRECT("'" & F12 & "'!E:E"), "Security-Critical"),
    SUM(COUNTIF(INDIRECT("'" & Z1:Z30 & "'!E:E"), "Security-Critical")))

=SUM(COUNTIF(INDIRECT("'" & mic:refdata & "'!E:E"), "Security-Critical"))

=SUM(IF(ISNUMBER(MATCH(Z1:Z30, INDIRECT("'" & Z1:Z30 & "'!B:B"), 0)), COUNTIF(INDIRECT("'" & Z1:Z30 & "'!E:E"), "Security-Critical"), 0))

=IF(F12<>"All Applications", INDEX(INDIRECT("'" & F12 & "'!H:H"), MATCH(F30, INDIRECT("'" & F12 & "'!B:B"), 0)), ZZ100)
=IFERROR(IF(F12<>"All Applications", INDEX(INDIRECT("'" & F12 & "'!H:H"), MATCH(F30, INDIRECT("'" & F12 & "'!B:B"), 0)), 0), 0)


=COUNTIF(Sheet1!E:E, "Security-Critical") + COUNTIF(Sheet2!E:E, "Security-Critical") + COUNTIF(Sheet3!E:E, "Security-Critical")
=SUMPRODUCT(COUNTIF(INDIRECT("'" & Z2:Z32 & "'!E:E"), "Security-Critical"))

=IFERROR(INDEX(INDIRECT("'" & F12 & "'!G:G"), MATCH(F30, INDIRECT("'" & F12 & "'!B:B"), 0)), 0)

=IFERROR(INDEX(INDIRECT("'" & F12 & "'!G:G"), SMALL(IF(INDIRECT("'" & F12 & "'!B:B")=F30, ROW(INDIRECT("'" & F12 & "'!B:B"))-ROW(INDIRECT("'" & F12 & "'!B1")), ""), ROW(1:1))), "")

=IFERROR(INDEX(INDIRECT("'" & F12 & "'!G:G"), SMALL(IF(INDIRECT("'" & F12 & "'!B:B")=F30, ROW(INDIRECT("'" & F12 & "'!B:B"))-ROW(INDIRECT("'" & F12 & "'!B1")), ""), ROW(1:1))+1), "")
=IFERROR(INDEX(INDIRECT("'" & F12 & "'!G:G"), MATCH(1, (INDIRECT("'" & F12 & "'!B:B")=F30)*(ROW(INDIRECT("'" & F12 & "'!B:B"))>ROW(INDIRECT("'" & F12 & "'!B1"))), 0)), "")

=SUMPRODUCT(--(INDIRECT("'" & F12 & "'!A:A")=F30), --(INDIRECT("'" & F12 & "'!C:C")>=INDIRECT("'" & F12 & "'!B:B")))
=IF(ROW(A1)>COUNTIF(INDIRECT("'" & F12 & "'!B:B"), F30), "", INDEX(INDIRECT("'" & F12 & "'!B:D"), SMALL(IF(INDIRECT("'" & F12 & "'!B:B")=F30, ROW(INDIRECT("'" & F12 & "'!B:B"))-ROW(INDIRECT("'" & F12 & "'!B1"))+1), ROW(A1)), COLUMN(A1)))
=IF(ROW(B60)>COUNTIF(INDIRECT("'" & F12 & "'!B:B"), F30), "", INDEX(INDIRECT("'" & F12 & "'!B:D"), SMALL(IF(INDIRECT("'" & F12 & "'!B:B")=F30, ROW(INDIRECT("'" & F12 & "'!B:B"))-ROW(INDIRECT("'" & F12 & "'!B1"))+1), ROW(B60)), COLUMN(B60)))
=IF(ROW(B60)-ROW($B$60)+1>COUNTIF(INDIRECT("'" & F12 & "'!B:B"), F30), "", INDEX(INDIRECT("'" & F12 & "'!B:D"), MATCH(F30, INDIRECT("'" & F12 & "'!B:B"), 0), COLUMN(B60)))
------------------------------------------------------------

Document doc = Jsoup.parse(tableHtml);
            Element table = doc.select("table").first();
            Elements rows = table.select("tr");

            Workbook workbook = new XSSFWorkbook();
            Sheet sheet = workbook.createSheet("Table Data");

            int rowNum = 0;
            for (Element row : rows) {
                Row excelRow = sheet.createRow(rowNum++);
                Elements cells = row.select("td");
                int colNum = 0;
                for (Element cell : cells) {
                    Cell excelCell = excelRow.createCell(colNum++);
                    excelCell.setCellValue(cell.text());
                }
            }

            // Save the workbook to a file
            try (FileOutputStream fileOut = new FileOutputStream("TableData.xlsx")) {
                workbook.write(fileOut);
                System.out.println("Excel file created successfully!");
            }

            workbook.close();
------------------------------

List<Workflow> workflows = new ArrayList<>();

        // Parse table data and populate Workflow objects
        Document doc = Jsoup.parse(tableHtml);
        Element table = doc.select("table").first();
        Elements rows = table.select("tr");

        for (Element row : rows) {
            Elements cells = row.select("td");
            if (cells.size() == 4) { // Assuming each row has 4 cells representing Application, Component, Workflows, Test Cases
                String application = cells.get(0).text();
                String component = cells.get(1).text();
                String workflowsText = cells.get(2).text();
                String testCases = cells.get(3).text();

                // Create a new Workflow object and add it to the list
                Workflow workflow = new Workflow(application, component, workflowsText, testCases);
                workflows.add(workflow);
            }
        }
-----------------------

// Method to extract hyperlinks from the cell content
    private static String extractHyperlinks(Element cell) {
        StringBuilder result = new StringBuilder();
        Elements links = cell.select("a[href]");
        for (Element link : links) {
            String linkText = link.text();
            String linkHref = link.attr("href");
            result.append("<a href='").append(linkHref).append("'>").append(linkText).append("</a>").append(", ");
        }
        return result.toString();
    }

-----

import java.io.File;
import java.util.ArrayList;
import java.util.List;

public class DirectoryBrowser {
    
    public static List<String> listFiles(String directoryPath) {
        List<String> fileList = new ArrayList<>();
        File directory = new File(directoryPath);
        if (directory.exists() && directory.isDirectory()) {
            listFilesRecursive(directory, fileList);
        } else {
            System.err.println("Directory not found: " + directoryPath);
        }
        return fileList;
    }

    private static void listFilesRecursive(File directory, List<String> fileList) {
        File[] files = directory.listFiles();
        if (files != null) {
            for (File file : files) {
                if (file.isDirectory()) {
                    listFilesRecursive(file, fileList);
                } else {
                    fileList.add(file.getAbsolutePath());
                }
            }
        }
    }

    public static void main(String[] args) {
        // Provide the directory path to browse
        String directoryPath = "/path/to/your/directory";
        List<String> files = listFiles(directoryPath);
        // Display the list of file names
        System.out.println("List of files:");
        for (String fileName : files) {
            System.out.println(fileName);
        }
    }
}
---

public void checkJsonResponseAndPopulate() {
    String jsonResponse = null;
    int attempts = 0;
    int maxAttempts = 15; // 30 seconds / 2 seconds per attempt

    while (jsonResponse == null && attempts < maxAttempts) {
        jsonResponse = getJson();
        if (jsonResponse != null) {
            populateData(jsonResponse);
            return; // Exit the method once data is populated
        } else {
            attempts++;
            try {
                Thread.sleep(2000); // Wait for 2 seconds before trying again
            } catch (InterruptedException e) {
                // Handle the exception, if necessary
                Thread.currentThread().interrupt();
                System.out.println("Thread was interrupted. Exiting the check loop.");
                return;
            }
        }
    }

    if (jsonResponse == null) {
        System.out.println("jsonResponse is still null after 30 seconds. Moving on...");
    }
}

// Assuming getJson and populateData methods are defined elsewhere
public String getJson() {
    // Placeholder for actual implementation
    return null; // Replace with actual JSON retrieval logic
}

public void populateData(String jsonResponse) {
    // Placeholder for actual implementation
    System.out.println("Populating data with: " + jsonResponse);
}


-----

To give an overview, we need an environment for running a java utility which is an executable jar. This is a standalone application, and no client will be accessing it (it has no exposed APIs or web component). This is a lightweight application which is not expected to consume a lot of heap. Application collects the data from Nexus and Confluence, aggregates it and stores into a CSV file in a specified directory on the same machine. The file will then be transferred to Mastercard network using GoAnywhere (we have Robin helping us on this).
